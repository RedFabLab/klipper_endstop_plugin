# CONFIG ENDSTOPS HARDWARE
[endstop_custom endstop_1]
pin: P1.25

[endstop_custom endstop_2]
pin: P1.26

# ENDSTOPS STATE VAARIABLE
[gcode_macro _ENDSTOPS_VARIABLES]
variable_endstop_1_state: False
variable_endstop_2_state: Falses
gcode:


# HELPER FUNCTION
# make query for update endstops internal state
[gcode_macro _CHECK_ENDSTOPS]
gcode:
    # UPDATE LAST STATE 
    QUERY_ENDSTOP ENDSTOP=endstop_1
    QUERY_ENDSTOP ENDSTOP=endstop_2

    _UPDATE_ENDSTOPS_VARIABLES 

# HELPER FUNCTION FOR HELPER FUNCTION
# write endstops states to global variables
# 
[gcode_macro _UPDATE_ENDSTOPS_VARIABLES]
gcode:
  {% set ENDSTOP_STATE_1 = printer["endstop_custom endstop_1"].state|default(0)|int %}
  {% set ENDSTOP_STATE_2 = printer["endstop_custom endstop_2"].state|default(0)|int %}
  SET_GCODE_VARIABLE MACRO=_ENDSTOPS_VARIABLES VARIABLE=endstop_1_state VALUE={ ENDSTOP_STATE_1 }
  SET_GCODE_VARIABLE MACRO=_ENDSTOPS_VARIABLES VARIABLE=endstop_2_state VALUE={ ENDSTOP_STATE_2 }


# EXAMPLES OF USAGE
# test how to read endstop in runtime and use with if-else
[gcode_macro ENDSTOP_USING_EXAMPLE]
gcode:
  # update states 
  _CHECK_ENDSTOPS

  # do smth usefull
  M114

  # do endstop check macros 
  ENDSTOP_CHECK_1

  # do smth usefull again
  M114

  # update states 
  _CHECK_ENDSTOPS

  # do endstop check macros 
  ENDSTOP_CHECK_2

# macros for processing endstop logic
# MUST be isolated macros
# in this macros we read endstop's state from global variable (_ENDSTOPS_VARIABLES)
[gcode_macro ENDSTOP_CHECK_1]
gcode:
    # read from global variable 
    {% set endstop_1_state = printer["gcode_macro _ENDSTOPS_VARIABLES"].endstop_1_state %}
    {% if endstop_1_state %}
        RESPOND MSG="ENDSTOPE 1 CHECK TRUE (ENDSTOP is triggered)"
    {% else %}
        RESPOND MSG="ENDSTOPE 1 CHECK FALSE (ENDSTOP is open)"
    {% endif %}


# one more macros for processing endstop logic
# MUST be isolated macros
# in this macros we read endstop's state from endstop_custom object internal parameter [state]
[gcode_macro ENDSTOP_CHECK_2]
gcode:
    # read direct from .state
    {% if printer["endstop_custom endstop_2"].state %}
        RESPOND MSG="ENDSTOPE 2 CHECK TRUE (ENDSTOP is open)"
    {% else %}
        RESPOND MSG="ENDSTOPE 2 CHECK FALSE (ENDSTOP is triggered)"
    {% endif %}


######################################################################################################################################
######################################################################################################################################
######################################################################################################################################
# TEST AREA
# LEGACY LEGACY LEGACY LEGACY

# [gcode_macro ENDSTOP_USING_GET_VAR]
# gcode:
#     {% set endstop_1_direct_acs_state = printer["gcode_macro _ENDSTOPS_VARIABLES"].endstop_1_state %}
#      RESPOND MSG="ENDSTOPE STATE 1 (get_var)= { endstop_1_get_var }"

# [gcode_macro ENDSTOP_USING_DIRECT_ACCESS]
# gcode:
#     # _QUERY_ENDSTOPS
#     _CHECK_ENDSTOPS
#     # EXTERNEL MACROS WITH DIRECT ACCESS TO LAST STATE
#     ENDSTOP_USING_DIRECT_ACCESS_EXTERNEL
#     # EXTERNEL MACROS WITH REDAING FROM VARIABLES (GLOBAL)
#     ENDSTOP_USING_VARIABLE_READ_EXTERNEL
#     RESPOND MSG="ENDSTOPE STATE 1 (DIRECT ACCESS FUNCTION)= { printer["endstop_custom endstop_1"].state }"


# [gcode_macro ENDSTOP_USING_DIRECT_ACCESS_EXTERNEL]
# gcode:
#     RESPOND MSG="ENDSTOPE STATE 1 (DIRECT ACCESS EXTERNEL FUNCTION)= { printer["endstop_custom endstop_1"].state }"


# [gcode_macro ENDSTOP_USING_VARIABLE_READ_EXTERNEL]
# gcode:
#     {% set endstop_1_read_var_external = printer["gcode_macro _ENDSTOPS_VARIABLES"].endstop_1_state %}
#     RESPOND MSG="ENDSTOPE STATE 1 (READ VARIABLES EXTERNEL FUNCTION)= { endstop_1_read_var_external }"